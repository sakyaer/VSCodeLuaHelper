"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const constants = require("constants");
const cp = require("child_process");
const assert = require("assert");
const net = require("net");
const protocolClient_1 = require("./protocolClient");
class DebugClient extends protocolClient_1.ProtocolClient {
    /**
     * Creates a DebugClient object that provides a promise-based API to write
     * debug adapter tests.
     * A simple mocha example for setting and hitting a breakpoint in line 15 of a program 'test.js' looks like this:
     *
     * var dc;
     * setup( () => {
     *     dc = new DebugClient('node', './out/node/nodeDebug.js', 'node');
     *     return dc.start();
     * });
     * teardown( () => dc.stop() );
     *
     * test('should stop on a breakpoint', () => {
     *     return dc.hitBreakpoint({ program: 'test.js' }, 'test.js', 15);
     * });
     */
    constructor(runtime, executable, debugType, spwanOptions) {
        super();
        this.defaultTimeout = 5000;
        this._runtime = runtime;
        this._executable = executable;
        this._spawnOptions = spwanOptions;
        this._enableStderr = false;
        this._debugType = debugType;
        this._supportsConfigurationDoneRequest = false;
        if (DebugClient.CASE_INSENSITIVE_FILESYSTEM === undefined) {
            try {
                fs.accessSync(process.execPath.toLowerCase(), constants.F_OK);
                fs.accessSync(process.execPath.toUpperCase(), constants.F_OK);
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = true;
            }
            catch (err) {
                DebugClient.CASE_INSENSITIVE_FILESYSTEM = false;
            }
        }
    }
    // ---- life cycle --------------------------------------------------------------------------------------------------------
    /**
     * Starts a new debug adapter and sets up communication via stdin/stdout.
     * If a port number is specified the adapter is not launched but a connection to
     * a debug adapter running in server mode is established. This is useful for debugging
     * the adapter while running tests. For this reason all timeouts are disabled in server mode.
     */
    start(port) {
        return new Promise((resolve, reject) => {
            if (typeof port === 'number') {
                this._socket = net.createConnection(port, '127.0.0.1', () => {
                    this.connect(this._socket, this._socket);
                    resolve();
                });
            }
            else {
                this._adapterProcess = cp.spawn(this._runtime, [this._executable], this._spawnOptions);
                const sanitize = (s) => s.toString().replace(/\r?\n$/mg, '');
                this._adapterProcess.stderr.on('data', (data) => {
                    if (this._enableStderr) {
                        console.log(sanitize(data));
                    }
                });
                this._adapterProcess.on('error', (err) => {
                    console.log(err);
                    reject(err);
                });
                this._adapterProcess.on('exit', (code, signal) => {
                    if (code) {
                        // done(new Error('debug adapter exit code: ' + code));
                    }
                });
                this.connect(this._adapterProcess.stdout, this._adapterProcess.stdin);
                resolve();
            }
        });
    }
    /**
     * Shutdown the debuggee and the debug adapter (or disconnect if in server mode).
     */
    stop() {
        return this.disconnectRequest().then(() => {
            this.stopAdapter();
        }).catch(() => {
            this.stopAdapter();
        });
    }
    stopAdapter() {
        if (this._adapterProcess) {
            this._adapterProcess.kill();
            this._adapterProcess = null;
        }
        if (this._socket) {
            this._socket.end();
            this._socket = null;
        }
    }
    // ---- protocol requests -------------------------------------------------------------------------------------------------
    initializeRequest(args) {
        if (!args) {
            args = {
                adapterID: this._debugType,
                linesStartAt1: true,
                columnsStartAt1: true,
                pathFormat: 'path'
            };
        }
        return this.send('initialize', args);
    }
    configurationDoneRequest(args) {
        return this.send('configurationDone', args);
    }
    launchRequest(args) {
        return this.send('launch', args);
    }
    attachRequest(args) {
        return this.send('attach', args);
    }
    restartRequest(args) {
        return this.send('restart', args);
    }
    disconnectRequest(args) {
        return this.send('disconnect', args);
    }
    setBreakpointsRequest(args) {
        return this.send('setBreakpoints', args);
    }
    setFunctionBreakpointsRequest(args) {
        return this.send('setFunctionBreakpoints', args);
    }
    setExceptionBreakpointsRequest(args) {
        return this.send('setExceptionBreakpoints', args);
    }
    continueRequest(args) {
        return this.send('continue', args);
    }
    nextRequest(args) {
        return this.send('next', args);
    }
    stepInRequest(args) {
        return this.send('stepIn', args);
    }
    stepOutRequest(args) {
        return this.send('stepOut', args);
    }
    stepBackRequest(args) {
        return this.send('stepBack', args);
    }
    reverseContinueRequest(args) {
        return this.send('reverseContinue', args);
    }
    restartFrameRequest(args) {
        return this.send('restartFrame', args);
    }
    gotoRequest(args) {
        return this.send('goto', args);
    }
    pauseRequest(args) {
        return this.send('pause', args);
    }
    stackTraceRequest(args) {
        return this.send('stackTrace', args);
    }
    scopesRequest(args) {
        return this.send('scopes', args);
    }
    variablesRequest(args) {
        return this.send('variables', args);
    }
    setVariableRequest(args) {
        return this.send('setVariable', args);
    }
    sourceRequest(args) {
        return this.send('source', args);
    }
    threadsRequest() {
        return this.send('threads');
    }
    modulesRequest(args) {
        return this.send('modules');
    }
    evaluateRequest(args) {
        return this.send('evaluate', args);
    }
    stepInTargetsRequest(args) {
        return this.send('stepInTargets', args);
    }
    gotoTargetsRequest(args) {
        return this.send('gotoTargets', args);
    }
    completionsRequest(args) {
        return this.send('completions', args);
    }
    exceptionInfoRequest(args) {
        return this.send('exceptionInfo', args);
    }
    customRequest(command, args) {
        return this.send(command, args);
    }
    // ---- convenience methods -----------------------------------------------------------------------------------------------
    /*
     * Returns a promise that will resolve if an event with a specific type was received within some specified time.
     * The promise will be rejected if a timeout occurs.
     */
    waitForEvent(eventType, timeout) {
        timeout = timeout || this.defaultTimeout;
        return new Promise((resolve, reject) => {
            this.once(eventType, event => {
                resolve(event);
            });
            if (!this._socket) {
                setTimeout(() => {
                    reject(new Error(`no event '${eventType}' received after ${timeout} ms`));
                }, timeout);
            }
        });
    }
    /*
     * Returns a promise that will resolve if an 'initialized' event was received within some specified time
     * and a subsequent 'configurationDone' request was successfully executed.
     * The promise will be rejected if a timeout occurs or if the 'configurationDone' request fails.
     */
    configurationSequence() {
        return this.waitForEvent('initialized').then(event => {
            return this.configurationDone();
        });
    }
    /**
     * Returns a promise that will resolve if a 'initialize' and a 'launch' request were successful.
     */
    launch(launchArgs) {
        return this.initializeRequest().then(response => {
            if (response.body && response.body.supportsConfigurationDoneRequest) {
                this._supportsConfigurationDoneRequest = true;
            }
            return this.launchRequest(launchArgs);
        });
    }
    configurationDone() {
        if (this._supportsConfigurationDoneRequest) {
            return this.configurationDoneRequest();
        }
        else {
            // if debug adapter doesn't support the configurationDoneRequest we have to send the setExceptionBreakpointsRequest.
            return this.setExceptionBreakpointsRequest({ filters: ['all'] });
        }
    }
    /*
     * Returns a promise that will resolve if a 'stopped' event was received within some specified time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the 'stackTrace' request fails.
     */
    assertStoppedLocation(reason, expected) {
        return this.waitForEvent('stopped').then(event => {
            assert.equal(event.body.reason, reason);
            return this.stackTraceRequest({
                threadId: event.body.threadId
            });
        }).then(response => {
            const frame = response.body.stackFrames[0];
            if (typeof expected.path === 'string' || expected.path instanceof RegExp) {
                this.assertPath(frame.source.path, expected.path, 'stopped location: path mismatch');
            }
            if (typeof expected.line === 'number') {
                assert.equal(frame.line, expected.line, 'stopped location: line mismatch');
            }
            if (typeof expected.column === 'number') {
                assert.equal(frame.column, expected.column, 'stopped location: column mismatch');
            }
            return response;
        });
    }
    assertPartialLocationsEqual(locA, locB) {
        if (locA.path) {
            this.assertPath(locA.path, locB.path, 'breakpoint verification mismatch: path');
        }
        if (typeof locA.line === 'number') {
            assert.equal(locA.line, locB.line, 'breakpoint verification mismatch: line');
        }
        if (typeof locB.column === 'number' && typeof locA.column === 'number') {
            assert.equal(locA.column, locB.column, 'breakpoint verification mismatch: column');
        }
    }
    /*
     * Returns a promise that will resolve if enough output events with the given category have been received
     * and the concatenated data match the expected data.
     * The promise will be rejected as soon as the received data cannot match the expected data or if a timeout occurs.
     */
    assertOutput(category, expected, timeout) {
        timeout = timeout || this.defaultTimeout;
        return new Promise((resolve, reject) => {
            let output = '';
            this.on('output', event => {
                const e = event;
                if (e.body.category === category) {
                    output += e.body.output;
                    if (output.indexOf(expected) === 0) {
                        resolve(event);
                    }
                    else if (expected.indexOf(output) !== 0) {
                        const sanitize = (s) => s.toString().replace(/\r/mg, '\\r').replace(/\n/mg, '\\n');
                        reject(new Error(`received data '${sanitize(output)}' is not a prefix of the expected data '${sanitize(expected)}'`));
                    }
                }
            });
            if (!this._socket) {
                setTimeout(() => {
                    reject(new Error(`not enough output data received after ${timeout} ms`));
                }, timeout);
            }
        });
    }
    assertPath(path, expected, message) {
        if (expected instanceof RegExp) {
            assert.ok(expected.test(path), message);
        }
        else {
            if (DebugClient.CASE_INSENSITIVE_FILESYSTEM) {
                if (typeof path === 'string') {
                    path = path.toLowerCase();
                }
                if (typeof expected === 'string') {
                    expected = expected.toLowerCase();
                }
            }
            assert.equal(path, expected, message);
        }
    }
    // ---- scenarios ---------------------------------------------------------------------------------------------------------
    /**
     * Returns a promise that will resolve if a configurable breakpoint has been hit within some time
     * and the event's reason and line number was asserted.
     * The promise will be rejected if a timeout occurs, the assertions fail, or if the requests fails.
     */
    hitBreakpoint(launchArgs, location, expectedStopLocation, expectedBPLocation) {
        return Promise.all([
            this.waitForEvent('initialized').then(event => {
                return this.setBreakpointsRequest({
                    lines: [location.line],
                    breakpoints: [{ line: location.line, column: location.column }],
                    source: { path: location.path }
                });
            }).then(response => {
                const bp = response.body.breakpoints[0];
                const verified = (typeof location.verified === 'boolean') ? location.verified : true;
                assert.equal(bp.verified, verified, 'breakpoint verification mismatch: verified');
                const actualLocation = {
                    column: bp.column,
                    line: bp.line,
                    path: bp.source && bp.source.path
                };
                this.assertPartialLocationsEqual(actualLocation, expectedBPLocation || location);
                return this.configurationDone();
            }),
            this.launch(launchArgs),
            this.assertStoppedLocation('breakpoint', expectedStopLocation || location)
        ]);
    }
}
exports.DebugClient = DebugClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVidWdDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Z0dBR2dHOztBQUVoRyx5QkFBMEI7QUFDMUIsdUNBQXdDO0FBQ3hDLG9DQUFxQztBQUNyQyxpQ0FBa0M7QUFDbEMsMkJBQTRCO0FBRTVCLHFEQUFnRDtBQWdCaEQsaUJBQXlCLFNBQVEsK0JBQWM7SUFnQjlDOzs7Ozs7Ozs7Ozs7Ozs7T0FlRztJQUNILFlBQVksT0FBZSxFQUFFLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxZQUE4QjtRQUNqRyxLQUFLLEVBQUUsQ0FBQztRQW5CRixtQkFBYyxHQUFHLElBQUksQ0FBQztRQW9CNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxDQUFDLGFBQWEsR0FBRSxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlDQUFpQyxHQUFHLEtBQUssQ0FBQztRQUUvQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsMkJBQTJCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUM7Z0JBQ0osRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUQsV0FBVyxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztZQUNoRCxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxD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QUU7Z0JBRWxCLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV4QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sUUFBUSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNyRixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLDRDQUE0QyxDQUFDLENBQUM7Z0JBRWxGLE1BQU0sY0FBYyxHQUFjO29CQUNqQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU07b0JBQ2pCLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSTtvQkFDYixJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUk7aUJBQ2pDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGNBQWMsRUFBRSxrQkFBa0IsSUFBSSxRQUFRLENBQUMsQ0FBQztnQkFFakYsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2pDLENBQUMsQ0FBQztZQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBRXZCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLElBQUksUUFBUSxDQUFDO1NBRTFFLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRDtBQWpiRCxrQ0FpYkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcbmltcG9ydCBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbmltcG9ydCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmltcG9ydCBuZXQgPSByZXF1aXJlKCduZXQnKTtcbmltcG9ydCB7RGVidWdQcm90b2NvbH0gZnJvbSAndnNjb2RlLWRlYnVncHJvdG9jb2wnO1xuaW1wb3J0IHtQcm90b2NvbENsaWVudH0gZnJvbSAnLi9wcm90b2NvbENsaWVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxvY2F0aW9uIHtcblx0cGF0aDogc3RyaW5nO1xuXHRsaW5lOiBudW1iZXI7XG5cdGNvbHVtbj86IG51bWJlcjtcblx0dmVyaWZpZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJ0aWFsTG9jYXRpb24ge1xuXHRwYXRoPzogc3RyaW5nO1xuXHRsaW5lPzogbnVtYmVyO1xuXHRjb2x1bW4/OiBudW1iZXI7XG5cdHZlcmlmaWVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIERlYnVnQ2xpZW50IGV4dGVuZHMgUHJvdG9jb2xDbGllbnQge1xuXG5cdHByaXZhdGUgc3RhdGljIENBU0VfSU5TRU5TSVRJVkVfRklMRVNZU1RFTSA6IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBfcnVudGltZTogc3RyaW5nO1xuXHRwcml2YXRlIF9leGVjdXRhYmxlOiBzdHJpbmc7XG5cdHByaXZhdGUgX2FkYXB0ZXJQcm9jZXNzOiBjcC5DaGlsZFByb2Nlc3M7XG5cdHByaXZhdGUgX3NwYXduT3B0aW9uczogY3AuU3Bhd25PcHRpb25zO1xuXHRwcml2YXRlIF9lbmFibGVTdGRlcnI6IGJvb2xlYW47XG5cdHByaXZhdGUgX2RlYnVnVHlwZTogc3RyaW5nO1xuXHRwcml2YXRlIF9zb2NrZXQ6IG5ldC5Tb2NrZXQ7XG5cblx0cHJpdmF0ZSBfc3VwcG9ydHNDb25maWd1cmF0aW9uRG9uZVJlcXVlc3Q6IGJvb2xlYW47XG5cblx0cHVibGljIGRlZmF1bHRUaW1lb3V0ID0gNTAwMDtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIERlYnVnQ2xpZW50IG9iamVjdCB0aGF0IHByb3ZpZGVzIGEgcHJvbWlzZS1iYXNlZCBBUEkgdG8gd3JpdGVcblx0ICogZGVidWcgYWRhcHRlciB0ZXN0cy5cblx0ICogQSBzaW1wbGUgbW9jaGEgZXhhbXBsZSBmb3Igc2V0dGluZyBhbmQgaGl0dGluZyBhIGJyZWFrcG9pbnQgaW4gbGluZSAxNSBvZiBhIHByb2dyYW0gJ3Rlc3QuanMnIGxvb2tzIGxpa2UgdGhpczpcblx0ICpcblx0ICogdmFyIGRjO1xuXHQgKiBzZXR1cCggKCkgPT4ge1xuXHQgKiAgICAgZGMgPSBuZXcgRGVidWdDbGllbnQoJ25vZGUnLCAnLi9vdXQvbm9kZS9ub2RlRGVidWcuanMnLCAnbm9kZScpO1xuXHQgKiAgICAgcmV0dXJuIGRjLnN0YXJ0KCk7XG5cdCAqIH0pO1xuXHQgKiB0ZWFyZG93biggKCkgPT4gZGMuc3RvcCgpICk7XG5cdCAqXG5cdCAqIHRlc3QoJ3Nob3VsZCBzdG9wIG9uIGEgYnJlYWtwb2ludCcsICgpID0+IHtcblx0ICogICAgIHJldHVybiBkYy5oaXRCcmVha3BvaW50KHsgcHJvZ3JhbTogJ3Rlc3QuanMnIH0sICd0ZXN0LmpzJywgMTUpO1xuXHQgKiB9KTtcblx0ICovXG5cdGNvbnN0cnVjdG9yKHJ1bnRpbWU6IHN0cmluZywgZXhlY3V0YWJsZTogc3RyaW5nLCBkZWJ1Z1R5cGU6IHN0cmluZywgc3B3YW5PcHRpb25zPzogY3AuU3Bhd25PcHRpb25zKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9ydW50aW1lID0gcnVudGltZTtcblx0XHR0aGlzLl9leGVjdXRhYmxlID0gZXhlY3V0YWJsZTtcblx0XHR0aGlzLl9zcGF3bk9wdGlvbnM9IHNwd2FuT3B0aW9ucztcblx0XHR0aGlzLl9lbmFibGVTdGRlcnIgPSBmYWxzZTtcblx0XHR0aGlzLl9kZWJ1Z1R5cGUgPSBkZWJ1Z1R5cGU7XG5cdFx0dGhpcy5fc3VwcG9ydHNDb25maWd1cmF0aW9uRG9uZVJlcXVlc3QgPSBmYWxzZTtcblxuXHRcdGlmIChEZWJ1Z0NsaWVudC5DQVNFX0lOU0VOU0lUSVZFX0ZJTEVTWVNURU0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZnMuYWNjZXNzU3luYyhwcm9jZXNzLmV4ZWNQYXRoLnRvTG93ZXJDYXNlKCksIGNvbnN0YW50cy5GX09LKTtcblx0XHRcdFx0ZnMuYWNjZXNzU3luYyhwcm9jZXNzLmV4ZWNQYXRoLnRvVXBwZXJDYXNlKCksIGNvbnN0YW50cy5GX09LKTtcblx0XHRcdFx0RGVidWdDbGllbnQuQ0FTRV9JTlNFTlNJVElWRV9GSUxFU1lTVEVNID0gdHJ1ZTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHREZWJ1Z0NsaWVudC5DQVNFX0lOU0VOU0lUSVZFX0ZJTEVTWVNURU0gPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAtLS0tIGxpZmUgY3ljbGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvKipcblx0ICogU3RhcnRzIGEgbmV3IGRlYnVnIGFkYXB0ZXIgYW5kIHNldHMgdXAgY29tbXVuaWNhdGlvbiB2aWEgc3RkaW4vc3Rkb3V0LlxuXHQgKiBJZiBhIHBvcnQgbnVtYmVyIGlzIHNwZWNpZmllZCB0aGUgYWRhcHRlciBpcyBub3QgbGF1bmNoZWQgYnV0IGEgY29ubmVjdGlvbiB0b1xuXHQgKiBhIGRlYnVnIGFkYXB0ZXIgcnVubmluZyBpbiBzZXJ2ZXIgbW9kZSBpcyBlc3RhYmxpc2hlZC4gVGhpcyBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZ1xuXHQgKiB0aGUgYWRhcHRlciB3aGlsZSBydW5uaW5nIHRlc3RzLiBGb3IgdGhpcyByZWFzb24gYWxsIHRpbWVvdXRzIGFyZSBkaXNhYmxlZCBpbiBzZXJ2ZXIgbW9kZS5cblx0ICovXG5cdHB1YmxpYyBzdGFydChwb3J0PzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiBwb3J0ID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHR0aGlzLl9zb2NrZXQgPSBuZXQuY3JlYXRlQ29ubmVjdGlvbihwb3J0LCAnMTI3LjAuMC4xJywgKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuY29ubmVjdCh0aGlzLl9zb2NrZXQsIHRoaXMuX3NvY2tldCk7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2FkYXB0ZXJQcm9jZXNzID0gY3Auc3Bhd24odGhpcy5fcnVudGltZSwgWyB0aGlzLl9leGVjdXRhYmxlIF0sIHRoaXMuX3NwYXduT3B0aW9ucyk7XG5cdFx0XHRcdGNvbnN0IHNhbml0aXplID0gKHM6IHN0cmluZykgPT4gcy50b1N0cmluZygpLnJlcGxhY2UoL1xccj9cXG4kL21nLCAnJyk7XG5cdFx0XHRcdHRoaXMuX2FkYXB0ZXJQcm9jZXNzLnN0ZGVyci5vbignZGF0YScsIChkYXRhOiBzdHJpbmcpID0+IHtcblx0XHRcdFx0XHRpZiAodGhpcy5fZW5hYmxlU3RkZXJyKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhzYW5pdGl6ZShkYXRhKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLl9hZGFwdGVyUHJvY2Vzcy5vbignZXJyb3InLCAoZXJyKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdFx0XHRyZWplY3QoZXJyKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRoaXMuX2FkYXB0ZXJQcm9jZXNzLm9uKCdleGl0JywgKGNvZGU6IG51bWJlciwgc2lnbmFsOiBzdHJpbmcpID0+IHtcblx0XHRcdFx0XHRpZiAoY29kZSkge1xuXHRcdFx0XHRcdFx0Ly8gZG9uZShuZXcgRXJyb3IoJ2RlYnVnIGFkYXB0ZXIgZXhpdCBjb2RlOiAnICsgY29kZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5jb25uZWN0KHRoaXMuX2FkYXB0ZXJQcm9jZXNzLnN0ZG91dCwgdGhpcy5fYWRhcHRlclByb2Nlc3Muc3RkaW4pO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogU2h1dGRvd24gdGhlIGRlYnVnZ2VlIGFuZCB0aGUgZGVidWcgYWRhcHRlciAob3IgZGlzY29ubmVjdCBpZiBpbiBzZXJ2ZXIgbW9kZSkuXG5cdCAqL1xuXHRwdWJsaWMgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcblxuXHRcdHJldHVybiB0aGlzLmRpc2Nvbm5lY3RSZXF1ZXN0KCkudGhlbigoKSA9PiB7XG5cdFx0XHR0aGlzLnN0b3BBZGFwdGVyKCk7XG5cdFx0fSkuY2F0Y2goKCkgPT4ge1xuXHRcdFx0dGhpcy5zdG9wQWRhcHRlcigpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBzdG9wQWRhcHRlcigpIHtcblx0XHRpZiAodGhpcy5fYWRhcHRlclByb2Nlc3MpIHtcblx0XHRcdHRoaXMuX2FkYXB0ZXJQcm9jZXNzLmtpbGwoKTtcblx0XHRcdHRoaXMuX2FkYXB0ZXJQcm9jZXNzID0gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX3NvY2tldCkge1xuXHRcdFx0dGhpcy5fc29ja2V0LmVuZCgpO1xuXHRcdFx0dGhpcy5fc29ja2V0ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvLyAtLS0tIHByb3RvY29sIHJlcXVlc3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRwdWJsaWMgaW5pdGlhbGl6ZVJlcXVlc3QoYXJncz86IERlYnVnUHJvdG9jb2wuSW5pdGlhbGl6ZVJlcXVlc3RBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuSW5pdGlhbGl6ZVJlc3BvbnNlPiB7XG5cdFx0aWYgKCFhcmdzKSB7XG5cdFx0XHRhcmdzID0ge1xuXHRcdFx0XHRhZGFwdGVySUQ6IHRoaXMuX2RlYnVnVHlwZSxcblx0XHRcdFx0bGluZXNTdGFydEF0MTogdHJ1ZSxcblx0XHRcdFx0Y29sdW1uc1N0YXJ0QXQxOiB0cnVlLFxuXHRcdFx0XHRwYXRoRm9ybWF0OiAncGF0aCdcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnNlbmQoJ2luaXRpYWxpemUnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBjb25maWd1cmF0aW9uRG9uZVJlcXVlc3QoYXJncz86IERlYnVnUHJvdG9jb2wuQ29uZmlndXJhdGlvbkRvbmVBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuQ29uZmlndXJhdGlvbkRvbmVSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ2NvbmZpZ3VyYXRpb25Eb25lJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgbGF1bmNoUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLkxhdW5jaFJlcXVlc3RBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuTGF1bmNoUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdsYXVuY2gnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBhdHRhY2hSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuQXR0YWNoUmVxdWVzdEFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5BdHRhY2hSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ2F0dGFjaCcsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHJlc3RhcnRSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuUmVzdGFydEFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5SZXN0YXJ0UmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdyZXN0YXJ0JywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgZGlzY29ubmVjdFJlcXVlc3QoYXJncz86IERlYnVnUHJvdG9jb2wuRGlzY29ubmVjdEFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5EaXNjb25uZWN0UmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdkaXNjb25uZWN0JywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0QnJlYWtwb2ludHNSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuU2V0QnJlYWtwb2ludHNBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU2V0QnJlYWtwb2ludHNSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ3NldEJyZWFrcG9pbnRzJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0RnVuY3Rpb25CcmVha3BvaW50c1JlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5TZXRGdW5jdGlvbkJyZWFrcG9pbnRzQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLlNldEZ1bmN0aW9uQnJlYWtwb2ludHNSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ3NldEZ1bmN0aW9uQnJlYWtwb2ludHMnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBzZXRFeGNlcHRpb25CcmVha3BvaW50c1JlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5TZXRFeGNlcHRpb25CcmVha3BvaW50c0FyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5TZXRFeGNlcHRpb25CcmVha3BvaW50c1Jlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnc2V0RXhjZXB0aW9uQnJlYWtwb2ludHMnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBjb250aW51ZVJlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5Db250aW51ZUFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5Db250aW51ZVJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnY29udGludWUnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBuZXh0UmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLk5leHRBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuTmV4dFJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnbmV4dCcsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHN0ZXBJblJlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5TdGVwSW5Bcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU3RlcEluUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdzdGVwSW4nLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBzdGVwT3V0UmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLlN0ZXBPdXRBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU3RlcE91dFJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnc3RlcE91dCcsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHN0ZXBCYWNrUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLlN0ZXBCYWNrQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLlN0ZXBCYWNrUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdzdGVwQmFjaycsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHJldmVyc2VDb250aW51ZVJlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5SZXZlcnNlQ29udGludWVBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuUmV2ZXJzZUNvbnRpbnVlUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdyZXZlcnNlQ29udGludWUnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyByZXN0YXJ0RnJhbWVSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuUmVzdGFydEZyYW1lQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLlJlc3RhcnRGcmFtZVJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgncmVzdGFydEZyYW1lJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgZ290b1JlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5Hb3RvQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLkdvdG9SZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ2dvdG8nLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBwYXVzZVJlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5QYXVzZUFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5QYXVzZVJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgncGF1c2UnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBzdGFja1RyYWNlUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLlN0YWNrVHJhY2VBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU3RhY2tUcmFjZVJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnc3RhY2tUcmFjZScsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHNjb3Blc1JlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5TY29wZXNBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU2NvcGVzUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdzY29wZXMnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyB2YXJpYWJsZXNSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuVmFyaWFibGVzQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLlZhcmlhYmxlc1Jlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgndmFyaWFibGVzJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0VmFyaWFibGVSZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuU2V0VmFyaWFibGVBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU2V0VmFyaWFibGVSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ3NldFZhcmlhYmxlJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgc291cmNlUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLlNvdXJjZUFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5Tb3VyY2VSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ3NvdXJjZScsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIHRocmVhZHNSZXF1ZXN0KCk6IFByb21pc2U8RGVidWdQcm90b2NvbC5UaHJlYWRzUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCd0aHJlYWRzJyk7XG5cdH1cblxuXHRwdWJsaWMgbW9kdWxlc1JlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5Nb2R1bGVzQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLk1vZHVsZXNSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnNlbmQoJ21vZHVsZXMnKTtcblx0fVxuXG5cdHB1YmxpYyBldmFsdWF0ZVJlcXVlc3QoYXJnczogRGVidWdQcm90b2NvbC5FdmFsdWF0ZUFyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5FdmFsdWF0ZVJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnZXZhbHVhdGUnLCBhcmdzKTtcblx0fVxuXG5cdHB1YmxpYyBzdGVwSW5UYXJnZXRzUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLlN0ZXBJblRhcmdldHNBcmd1bWVudHMpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuU3RlcEluVGFyZ2V0c1Jlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VuZCgnc3RlcEluVGFyZ2V0cycsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIGdvdG9UYXJnZXRzUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLkdvdG9UYXJnZXRzQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLkdvdG9UYXJnZXRzUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdnb3RvVGFyZ2V0cycsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIGNvbXBsZXRpb25zUmVxdWVzdChhcmdzOiBEZWJ1Z1Byb3RvY29sLkNvbXBsZXRpb25zQXJndW1lbnRzKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLkNvbXBsZXRpb25zUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdjb21wbGV0aW9ucycsIGFyZ3MpO1xuXHR9XG5cblx0cHVibGljIGV4Y2VwdGlvbkluZm9SZXF1ZXN0KGFyZ3M6IERlYnVnUHJvdG9jb2wuRXhjZXB0aW9uSW5mb0FyZ3VtZW50cyk6IFByb21pc2U8RGVidWdQcm90b2NvbC5FeGNlcHRpb25JbmZvUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKCdleGNlcHRpb25JbmZvJywgYXJncyk7XG5cdH1cblxuXHRwdWJsaWMgY3VzdG9tUmVxdWVzdChjb21tYW5kOiBzdHJpbmcsIGFyZ3M/OiBhbnkpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIGFyZ3MpO1xuXHR9XG5cblx0Ly8gLS0tLSBjb252ZW5pZW5jZSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0Lypcblx0ICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgaWYgYW4gZXZlbnQgd2l0aCBhIHNwZWNpZmljIHR5cGUgd2FzIHJlY2VpdmVkIHdpdGhpbiBzb21lIHNwZWNpZmllZCB0aW1lLlxuXHQgKiBUaGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGlmIGEgdGltZW91dCBvY2N1cnMuXG5cdCAqL1xuXHRwdWJsaWMgd2FpdEZvckV2ZW50KGV2ZW50VHlwZTogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyKTogUHJvbWlzZTxEZWJ1Z1Byb3RvY29sLkV2ZW50PiB7XG5cblx0XHR0aW1lb3V0ID0gdGltZW91dCB8fCB0aGlzLmRlZmF1bHRUaW1lb3V0O1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMub25jZShldmVudFR5cGUsIGV2ZW50ID0+IHtcblx0XHRcdFx0cmVzb2x2ZShldmVudCk7XG5cdFx0XHR9KTtcblx0XHRcdGlmICghdGhpcy5fc29ja2V0KSB7XHQvLyBubyB0aW1lb3V0cyBpZiBkZWJ1Z2dpbmcgdGhlIHRlc3RzXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoYG5vIGV2ZW50ICcke2V2ZW50VHlwZX0nIHJlY2VpdmVkIGFmdGVyICR7dGltZW91dH0gbXNgKSk7XG5cdFx0XHRcdH0sIHRpbWVvdXQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Lypcblx0ICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgaWYgYW4gJ2luaXRpYWxpemVkJyBldmVudCB3YXMgcmVjZWl2ZWQgd2l0aGluIHNvbWUgc3BlY2lmaWVkIHRpbWVcblx0ICogYW5kIGEgc3Vic2VxdWVudCAnY29uZmlndXJhdGlvbkRvbmUnIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC5cblx0ICogVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpZiBhIHRpbWVvdXQgb2NjdXJzIG9yIGlmIHRoZSAnY29uZmlndXJhdGlvbkRvbmUnIHJlcXVlc3QgZmFpbHMuXG5cdCAqL1xuXHRwdWJsaWMgY29uZmlndXJhdGlvblNlcXVlbmNlKCk6IFByb21pc2U8YW55PiB7XG5cblx0XHRyZXR1cm4gdGhpcy53YWl0Rm9yRXZlbnQoJ2luaXRpYWxpemVkJykudGhlbihldmVudCA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uRG9uZSgpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIGlmIGEgJ2luaXRpYWxpemUnIGFuZCBhICdsYXVuY2gnIHJlcXVlc3Qgd2VyZSBzdWNjZXNzZnVsLlxuXHQgKi9cblx0cHVibGljIGxhdW5jaChsYXVuY2hBcmdzOiBhbnkpOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuTGF1bmNoUmVzcG9uc2U+IHtcblxuXHRcdHJldHVybiB0aGlzLmluaXRpYWxpemVSZXF1ZXN0KCkudGhlbihyZXNwb25zZSA9PiB7XG5cdFx0XHRpZiAocmVzcG9uc2UuYm9keSAmJiByZXNwb25zZS5ib2R5LnN1cHBvcnRzQ29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0KSB7XG5cdFx0XHRcdHRoaXMuX3N1cHBvcnRzQ29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmxhdW5jaFJlcXVlc3QobGF1bmNoQXJncyk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGNvbmZpZ3VyYXRpb25Eb25lKCkgOiBQcm9taXNlPERlYnVnUHJvdG9jb2wuUmVzcG9uc2U+IHtcblx0XHRpZiAodGhpcy5fc3VwcG9ydHNDb25maWd1cmF0aW9uRG9uZVJlcXVlc3QpIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpZiBkZWJ1ZyBhZGFwdGVyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgY29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0IHdlIGhhdmUgdG8gc2VuZCB0aGUgc2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0LlxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0KHsgZmlsdGVyczogWyAnYWxsJyBdIH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qXG5cdCAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIGlmIGEgJ3N0b3BwZWQnIGV2ZW50IHdhcyByZWNlaXZlZCB3aXRoaW4gc29tZSBzcGVjaWZpZWQgdGltZVxuXHQgKiBhbmQgdGhlIGV2ZW50J3MgcmVhc29uIGFuZCBsaW5lIG51bWJlciB3YXMgYXNzZXJ0ZWQuXG5cdCAqIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaWYgYSB0aW1lb3V0IG9jY3VycywgdGhlIGFzc2VydGlvbnMgZmFpbCwgb3IgaWYgdGhlICdzdGFja1RyYWNlJyByZXF1ZXN0IGZhaWxzLlxuXHQgKi9cblx0cHVibGljIGFzc2VydFN0b3BwZWRMb2NhdGlvbihyZWFzb246IHN0cmluZywgZXhwZWN0ZWQ6IHsgcGF0aD86IHN0cmluZyB8IFJlZ0V4cCwgbGluZT86IG51bWJlciwgY29sdW1uPzogbnVtYmVyIH0gKSA6IFByb21pc2U8RGVidWdQcm90b2NvbC5TdGFja1RyYWNlUmVzcG9uc2U+IHtcblxuXHRcdHJldHVybiB0aGlzLndhaXRGb3JFdmVudCgnc3RvcHBlZCcpLnRoZW4oZXZlbnQgPT4ge1xuXHRcdFx0YXNzZXJ0LmVxdWFsKGV2ZW50LmJvZHkucmVhc29uLCByZWFzb24pO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhY2tUcmFjZVJlcXVlc3Qoe1xuXHRcdFx0XHR0aHJlYWRJZDogZXZlbnQuYm9keS50aHJlYWRJZFxuXHRcdFx0fSk7XG5cdFx0fSkudGhlbihyZXNwb25zZSA9PiB7XG5cdFx0XHRjb25zdCBmcmFtZSA9IHJlc3BvbnNlLmJvZHkuc3RhY2tGcmFtZXNbMF07XG5cdFx0XHRpZiAodHlwZW9mIGV4cGVjdGVkLnBhdGggPT09ICdzdHJpbmcnIHx8IGV4cGVjdGVkLnBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdFx0dGhpcy5hc3NlcnRQYXRoKGZyYW1lLnNvdXJjZS5wYXRoLCBleHBlY3RlZC5wYXRoLCAnc3RvcHBlZCBsb2NhdGlvbjogcGF0aCBtaXNtYXRjaCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBleHBlY3RlZC5saW5lID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhc3NlcnQuZXF1YWwoZnJhbWUubGluZSwgZXhwZWN0ZWQubGluZSwgJ3N0b3BwZWQgbG9jYXRpb246IGxpbmUgbWlzbWF0Y2gnKTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2YgZXhwZWN0ZWQuY29sdW1uID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhc3NlcnQuZXF1YWwoZnJhbWUuY29sdW1uLCBleHBlY3RlZC5jb2x1bW4sICdzdG9wcGVkIGxvY2F0aW9uOiBjb2x1bW4gbWlzbWF0Y2gnKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgYXNzZXJ0UGFydGlhbExvY2F0aW9uc0VxdWFsKGxvY0E6IElQYXJ0aWFsTG9jYXRpb24sIGxvY0I6IElQYXJ0aWFsTG9jYXRpb24pOiB2b2lkIHtcblx0XHRpZiAobG9jQS5wYXRoKSB7XG5cdFx0XHR0aGlzLmFzc2VydFBhdGgobG9jQS5wYXRoLCBsb2NCLnBhdGgsICdicmVha3BvaW50IHZlcmlmaWNhdGlvbiBtaXNtYXRjaDogcGF0aCcpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIGxvY0EubGluZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdGFzc2VydC5lcXVhbChsb2NBLmxpbmUsIGxvY0IubGluZSwgJ2JyZWFrcG9pbnQgdmVyaWZpY2F0aW9uIG1pc21hdGNoOiBsaW5lJyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgbG9jQi5jb2x1bW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBsb2NBLmNvbHVtbiA9PT0gJ251bWJlcicpIHtcblx0XHRcdGFzc2VydC5lcXVhbChsb2NBLmNvbHVtbiwgbG9jQi5jb2x1bW4sICdicmVha3BvaW50IHZlcmlmaWNhdGlvbiBtaXNtYXRjaDogY29sdW1uJyk7XG5cdFx0fVxuXHR9XG5cblx0Lypcblx0ICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgaWYgZW5vdWdoIG91dHB1dCBldmVudHMgd2l0aCB0aGUgZ2l2ZW4gY2F0ZWdvcnkgaGF2ZSBiZWVuIHJlY2VpdmVkXG5cdCAqIGFuZCB0aGUgY29uY2F0ZW5hdGVkIGRhdGEgbWF0Y2ggdGhlIGV4cGVjdGVkIGRhdGEuXG5cdCAqIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgYXMgc29vbiBhcyB0aGUgcmVjZWl2ZWQgZGF0YSBjYW5ub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIGRhdGEgb3IgaWYgYSB0aW1lb3V0IG9jY3Vycy5cblx0ICovXG5cdHB1YmxpYyBhc3NlcnRPdXRwdXQoY2F0ZWdvcnk6IHN0cmluZywgZXhwZWN0ZWQ6IHN0cmluZywgdGltZW91dD86IG51bWJlcik6IFByb21pc2U8RGVidWdQcm90b2NvbC5FdmVudD4ge1xuXG5cdFx0dGltZW91dCA9IHRpbWVvdXQgfHwgdGhpcy5kZWZhdWx0VGltZW91dDtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRsZXQgb3V0cHV0ID0gJyc7XG5cdFx0XHR0aGlzLm9uKCdvdXRwdXQnLCBldmVudCA9PiB7XG5cdFx0XHRcdGNvbnN0IGUgPSA8RGVidWdQcm90b2NvbC5PdXRwdXRFdmVudD4gZXZlbnQ7XG5cdFx0XHRcdGlmIChlLmJvZHkuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KSB7XG5cdFx0XHRcdFx0b3V0cHV0ICs9IGUuYm9keS5vdXRwdXQ7XG5cdFx0XHRcdFx0aWYgKG91dHB1dC5pbmRleE9mKGV4cGVjdGVkKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0cmVzb2x2ZShldmVudCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChleHBlY3RlZC5pbmRleE9mKG91dHB1dCkgIT09IDApIHtcblx0XHRcdFx0XHRcdGNvbnN0IHNhbml0aXplID0gKHM6IHN0cmluZykgPT4gcy50b1N0cmluZygpLnJlcGxhY2UoL1xcci9tZywgJ1xcXFxyJykucmVwbGFjZSgvXFxuL21nLCAnXFxcXG4nKTtcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoYHJlY2VpdmVkIGRhdGEgJyR7c2FuaXRpemUob3V0cHV0KX0nIGlzIG5vdCBhIHByZWZpeCBvZiB0aGUgZXhwZWN0ZWQgZGF0YSAnJHtzYW5pdGl6ZShleHBlY3RlZCl9J2ApKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0aWYgKCF0aGlzLl9zb2NrZXQpIHtcdC8vIG5vIHRpbWVvdXRzIGlmIGRlYnVnZ2luZyB0aGUgdGVzdHNcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihgbm90IGVub3VnaCBvdXRwdXQgZGF0YSByZWNlaXZlZCBhZnRlciAke3RpbWVvdXR9IG1zYCkpO1xuXHRcdFx0XHR9LCB0aW1lb3V0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBhc3NlcnRQYXRoKHBhdGg6IHN0cmluZywgZXhwZWN0ZWQ6IHN0cmluZyB8IFJlZ0V4cCwgbWVzc2FnZT86IHN0cmluZykge1xuXG5cdFx0aWYgKGV4cGVjdGVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0XHRhc3NlcnQub2soKDxSZWdFeHA+ZXhwZWN0ZWQpLnRlc3QocGF0aCksIG1lc3NhZ2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoRGVidWdDbGllbnQuQ0FTRV9JTlNFTlNJVElWRV9GSUxFU1lTVEVNKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRwYXRoID0gcGF0aC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0ZXhwZWN0ZWQgPSAoPHN0cmluZz5leHBlY3RlZCkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0YXNzZXJ0LmVxdWFsKHBhdGgsIGV4cGVjdGVkLCBtZXNzYWdlKTtcblx0XHR9XG5cdH1cblxuXHQvLyAtLS0tIHNjZW5hcmlvcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgaWYgYSBjb25maWd1cmFibGUgYnJlYWtwb2ludCBoYXMgYmVlbiBoaXQgd2l0aGluIHNvbWUgdGltZVxuXHQgKiBhbmQgdGhlIGV2ZW50J3MgcmVhc29uIGFuZCBsaW5lIG51bWJlciB3YXMgYXNzZXJ0ZWQuXG5cdCAqIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaWYgYSB0aW1lb3V0IG9jY3VycywgdGhlIGFzc2VydGlvbnMgZmFpbCwgb3IgaWYgdGhlIHJlcXVlc3RzIGZhaWxzLlxuXHQgKi9cblx0cHVibGljIGhpdEJyZWFrcG9pbnQobGF1bmNoQXJnczogYW55LCBsb2NhdGlvbjogSUxvY2F0aW9uLCBleHBlY3RlZFN0b3BMb2NhdGlvbj86IElQYXJ0aWFsTG9jYXRpb24sIGV4cGVjdGVkQlBMb2NhdGlvbj86IElQYXJ0aWFsTG9jYXRpb24pIDogUHJvbWlzZTxhbnk+IHtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbChbXG5cblx0XHRcdHRoaXMud2FpdEZvckV2ZW50KCdpbml0aWFsaXplZCcpLnRoZW4oZXZlbnQgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRCcmVha3BvaW50c1JlcXVlc3Qoe1xuXHRcdFx0XHRcdGxpbmVzOiBbIGxvY2F0aW9uLmxpbmUgXSxcblx0XHRcdFx0XHRicmVha3BvaW50czogWyB7IGxpbmU6IGxvY2F0aW9uLmxpbmUsIGNvbHVtbjogbG9jYXRpb24uY29sdW1uIH0gXSxcblx0XHRcdFx0XHRzb3VyY2U6IHsgcGF0aDogbG9jYXRpb24ucGF0aCB9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSkudGhlbihyZXNwb25zZSA9PiB7XG5cblx0XHRcdFx0Y29uc3QgYnAgPSByZXNwb25zZS5ib2R5LmJyZWFrcG9pbnRzWzBdO1xuXG5cdFx0XHRcdGNvbnN0IHZlcmlmaWVkID0gKHR5cGVvZiBsb2NhdGlvbi52ZXJpZmllZCA9PT0gJ2Jvb2xlYW4nKSA/IGxvY2F0aW9uLnZlcmlmaWVkIDogdHJ1ZTtcblx0XHRcdFx0YXNzZXJ0LmVxdWFsKGJwLnZlcmlmaWVkLCB2ZXJpZmllZCwgJ2JyZWFrcG9pbnQgdmVyaWZpY2F0aW9uIG1pc21hdGNoOiB2ZXJpZmllZCcpO1xuXG5cdFx0XHRcdGNvbnN0IGFjdHVhbExvY2F0aW9uOiBJTG9jYXRpb24gPSB7XG5cdFx0XHRcdFx0Y29sdW1uOiBicC5jb2x1bW4sXG5cdFx0XHRcdFx0bGluZTogYnAubGluZSxcblx0XHRcdFx0XHRwYXRoOiBicC5zb3VyY2UgJiYgYnAuc291cmNlLnBhdGhcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy5hc3NlcnRQYXJ0aWFsTG9jYXRpb25zRXF1YWwoYWN0dWFsTG9jYXRpb24sIGV4cGVjdGVkQlBMb2NhdGlvbiB8fCBsb2NhdGlvbik7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uZmlndXJhdGlvbkRvbmUoKTtcblx0XHRcdH0pLFxuXG5cdFx0XHR0aGlzLmxhdW5jaChsYXVuY2hBcmdzKSxcblxuXHRcdFx0dGhpcy5hc3NlcnRTdG9wcGVkTG9jYXRpb24oJ2JyZWFrcG9pbnQnLCBleHBlY3RlZFN0b3BMb2NhdGlvbiB8fCBsb2NhdGlvbilcblxuXHRcdF0pO1xuXHR9XG59XG4iXX0=